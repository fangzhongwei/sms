// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.lawsofnature.sms.domain.mq.sms

@SerialVersionUID(0L)
final case class SmsMessage(
                             traceId: String = "",
                             ip: Long = 0L,
                             deviceType: Int = 0,
                             fingerPrint: String = "",
                             memberId: Long = 0L,
                             smsType: Int = 0,
                             mobile: String = "",
                             channel: Int = 0,
                             resend: Boolean = false,
                             lastChannel: Int = 0,
                             content: String = ""
                           ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SmsMessage] with com.trueaccord.lenses.Updatable[SmsMessage] {
  @transient
  private[this] var __serializedSizeCachedValue: Int = 0

  private[this] def __computeSerializedValue(): Int = {
    var __size = 0
    if (traceId != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, traceId)
    }
    if (ip != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, ip)
    }
    if (deviceType != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, deviceType)
    }
    if (fingerPrint != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, fingerPrint)
    }
    if (memberId != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, memberId)
    }
    if (smsType != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, smsType)
    }
    if (mobile != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, mobile)
    }
    if (channel != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, channel)
    }
    if (resend != false) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(9, resend)
    }
    if (lastChannel != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, lastChannel)
    }
    if (content != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, content)
    }
    __size
  }

  final override def serializedSize: Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    {
      val __v = traceId
      if (__v != "") {
        _output__.writeString(1, __v)
      }
    };
    {
      val __v = ip
      if (__v != 0L) {
        _output__.writeInt64(2, __v)
      }
    };
    {
      val __v = deviceType
      if (__v != 0) {
        _output__.writeInt32(3, __v)
      }
    };
    {
      val __v = fingerPrint
      if (__v != "") {
        _output__.writeString(4, __v)
      }
    };
    {
      val __v = memberId
      if (__v != 0L) {
        _output__.writeInt64(5, __v)
      }
    };
    {
      val __v = smsType
      if (__v != 0) {
        _output__.writeInt32(6, __v)
      }
    };
    {
      val __v = mobile
      if (__v != "") {
        _output__.writeString(7, __v)
      }
    };
    {
      val __v = channel
      if (__v != 0) {
        _output__.writeInt32(8, __v)
      }
    };
    {
      val __v = resend
      if (__v != false) {
        _output__.writeBool(9, __v)
      }
    };
    {
      val __v = lastChannel
      if (__v != 0) {
        _output__.writeInt32(10, __v)
      }
    };
    {
      val __v = content
      if (__v != "") {
        _output__.writeString(11, __v)
      }
    };
  }

  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.lawsofnature.sms.domain.mq.sms.SmsMessage = {
    var __traceId = this.traceId
    var __ip = this.ip
    var __deviceType = this.deviceType
    var __fingerPrint = this.fingerPrint
    var __memberId = this.memberId
    var __smsType = this.smsType
    var __mobile = this.mobile
    var __channel = this.channel
    var __resend = this.resend
    var __lastChannel = this.lastChannel
    var __content = this.content
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __traceId = _input__.readString()
        case 16 =>
          __ip = _input__.readInt64()
        case 24 =>
          __deviceType = _input__.readInt32()
        case 34 =>
          __fingerPrint = _input__.readString()
        case 40 =>
          __memberId = _input__.readInt64()
        case 48 =>
          __smsType = _input__.readInt32()
        case 58 =>
          __mobile = _input__.readString()
        case 64 =>
          __channel = _input__.readInt32()
        case 72 =>
          __resend = _input__.readBool()
        case 80 =>
          __lastChannel = _input__.readInt32()
        case 90 =>
          __content = _input__.readString()
        case tag => _input__.skipField(tag)
      }
    }
    com.lawsofnature.sms.domain.mq.sms.SmsMessage(
      traceId = __traceId,
      ip = __ip,
      deviceType = __deviceType,
      fingerPrint = __fingerPrint,
      memberId = __memberId,
      smsType = __smsType,
      mobile = __mobile,
      channel = __channel,
      resend = __resend,
      lastChannel = __lastChannel,
      content = __content
    )
  }

  def withTraceId(__v: String): SmsMessage = copy(traceId = __v)

  def withIp(__v: Long): SmsMessage = copy(ip = __v)

  def withDeviceType(__v: Int): SmsMessage = copy(deviceType = __v)

  def withFingerPrint(__v: String): SmsMessage = copy(fingerPrint = __v)

  def withMemberId(__v: Long): SmsMessage = copy(memberId = __v)

  def withSmsType(__v: Int): SmsMessage = copy(smsType = __v)

  def withMobile(__v: String): SmsMessage = copy(mobile = __v)

  def withChannel(__v: Int): SmsMessage = copy(channel = __v)

  def withResend(__v: Boolean): SmsMessage = copy(resend = __v)

  def withLastChannel(__v: Int): SmsMessage = copy(lastChannel = __v)

  def withContent(__v: String): SmsMessage = copy(content = __v)

  def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
    __field.getNumber match {
      case 1 => {
        val __t = traceId
        if (__t != "") __t else null
      }
      case 2 => {
        val __t = ip
        if (__t != 0L) __t else null
      }
      case 3 => {
        val __t = deviceType
        if (__t != 0) __t else null
      }
      case 4 => {
        val __t = fingerPrint
        if (__t != "") __t else null
      }
      case 5 => {
        val __t = memberId
        if (__t != 0L) __t else null
      }
      case 6 => {
        val __t = smsType
        if (__t != 0) __t else null
      }
      case 7 => {
        val __t = mobile
        if (__t != "") __t else null
      }
      case 8 => {
        val __t = channel
        if (__t != 0) __t else null
      }
      case 9 => {
        val __t = resend
        if (__t != false) __t else null
      }
      case 10 => {
        val __t = lastChannel
        if (__t != 0) __t else null
      }
      case 11 => {
        val __t = content
        if (__t != "") __t else null
      }
    }
  }

  override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)

  def companion = com.lawsofnature.sms.domain.mq.sms.SmsMessage
}

object SmsMessage extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.lawsofnature.sms.domain.mq.sms.SmsMessage] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.lawsofnature.sms.domain.mq.sms.SmsMessage] = this

  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.lawsofnature.sms.domain.mq.sms.SmsMessage = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.lawsofnature.sms.domain.mq.sms.SmsMessage(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(7), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(8), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(9), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(10), "").asInstanceOf[String]
    )
  }

  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SmsProto.descriptor.getMessageTypes.get(0)

  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)

  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)

  lazy val defaultInstance = com.lawsofnature.sms.domain.mq.sms.SmsMessage(
  )

  implicit class SmsMessageLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.lawsofnature.sms.domain.mq.sms.SmsMessage]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.lawsofnature.sms.domain.mq.sms.SmsMessage](_l) {
    def traceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.traceId)((c_, f_) => c_.copy(traceId = f_))

    def ip: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.ip)((c_, f_) => c_.copy(ip = f_))

    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))

    def fingerPrint: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.fingerPrint)((c_, f_) => c_.copy(fingerPrint = f_))

    def memberId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.memberId)((c_, f_) => c_.copy(memberId = f_))

    def smsType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.smsType)((c_, f_) => c_.copy(smsType = f_))

    def mobile: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.mobile)((c_, f_) => c_.copy(mobile = f_))

    def channel: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.channel)((c_, f_) => c_.copy(channel = f_))

    def resend: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.resend)((c_, f_) => c_.copy(resend = f_))

    def lastChannel: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.lastChannel)((c_, f_) => c_.copy(lastChannel = f_))

    def content: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.content)((c_, f_) => c_.copy(content = f_))
  }

  final val TRACEID_FIELD_NUMBER = 1
  final val IP_FIELD_NUMBER = 2
  final val DEVICETYPE_FIELD_NUMBER = 3
  final val FINGERPRINT_FIELD_NUMBER = 4
  final val MEMBERID_FIELD_NUMBER = 5
  final val SMSTYPE_FIELD_NUMBER = 6
  final val MOBILE_FIELD_NUMBER = 7
  final val CHANNEL_FIELD_NUMBER = 8
  final val RESEND_FIELD_NUMBER = 9
  final val LASTCHANNEL_FIELD_NUMBER = 10
  final val CONTENT_FIELD_NUMBER = 11
}
