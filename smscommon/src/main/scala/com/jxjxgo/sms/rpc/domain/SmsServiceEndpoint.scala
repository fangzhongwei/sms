/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.sms.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil, ToThriftService}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait SmsServiceEndpoint[+MM[_]] extends ThriftService {
  
  def sendLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest): MM[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]
  
  def verifyLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest): MM[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]
}



object SmsServiceEndpoint { self =>

  case class ServiceIface(
      sendLoginVerificationCode : com.twitter.finagle.Service[self.SendLoginVerificationCode.Args, self.SendLoginVerificationCode.Result],
      verifyLoginVerificationCode : com.twitter.finagle.Service[self.VerifyLoginVerificationCode.Args, self.VerifyLoginVerificationCode.Result]
  ) extends BaseServiceIface

  // This is needed to support service inheritance.
  trait BaseServiceIface extends ToThriftService {
    def sendLoginVerificationCode : com.twitter.finagle.Service[self.SendLoginVerificationCode.Args, self.SendLoginVerificationCode.Result]
    def verifyLoginVerificationCode : com.twitter.finagle.Service[self.VerifyLoginVerificationCode.Args, self.VerifyLoginVerificationCode.Result]

    override def toThriftService: ThriftService = new MethodIface(this)
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          sendLoginVerificationCode = ThriftServiceIface(self.SendLoginVerificationCode, binaryService, pf, stats),
          verifyLoginVerificationCode = ThriftServiceIface(self.VerifyLoginVerificationCode, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: BaseServiceIface)
    extends SmsServiceEndpoint[Future] {
    private[this] val __sendLoginVerificationCode_service =
      ThriftServiceIface.resultFilter(self.SendLoginVerificationCode) andThen serviceIface.sendLoginVerificationCode
    def sendLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest): Future[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] =
      __sendLoginVerificationCode_service(self.SendLoginVerificationCode.Args(traceId, request))
    private[this] val __verifyLoginVerificationCode_service =
      ThriftServiceIface.resultFilter(self.VerifyLoginVerificationCode) andThen serviceIface.verifyLoginVerificationCode
    def verifyLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest): Future[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] =
      __verifyLoginVerificationCode_service(self.VerifyLoginVerificationCode.Args(traceId, request))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, SmsServiceEndpoint[Future]] {
    def newMethodIface(serviceIface: ServiceIface): SmsServiceEndpoint[Future] =
      new MethodIface(serviceIface)
  }

  object SendLoginVerificationCode extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("sendLoginVerificationCode_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val RequestField = new TField("request", TType.STRUCT, 2)
      val RequestFieldManifest = implicitly[Manifest[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          request =
            {
              val field = original.request
              com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    request = readRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'request' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          request,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest
      ): Args =
        new Args(
          traceId,
          request
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readRequestValue(_iprot: TProtocol): com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest = {
        com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest.decode(_iprot)
      }
    
      @inline private def writeRequestField(request_item: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(RequestField)
        writeRequestValue(request_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeRequestValue(request_item: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest, _oprot: TProtocol): Unit = {
        request_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest
      ) = this(
        traceId,
        request,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (request ne null) writeRequestField(request, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.request
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("sendLoginVerificationCode_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse = {
        com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "sendLoginVerificationCode"
    val serviceName = "SmsServiceEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val sendLoginVerificationCode$args = SendLoginVerificationCode.Args
  type sendLoginVerificationCode$args = SendLoginVerificationCode.Args

  val sendLoginVerificationCode$result = SendLoginVerificationCode.Result
  type sendLoginVerificationCode$result = SendLoginVerificationCode.Result

  object VerifyLoginVerificationCode extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("verifyLoginVerificationCode_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val RequestField = new TField("request", TType.STRUCT, 2)
      val RequestFieldManifest = implicitly[Manifest[com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          request =
            {
              val field = original.request
              com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    request = readRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'request' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          request,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest
      ): Args =
        new Args(
          traceId,
          request
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readRequestValue(_iprot: TProtocol): com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest = {
        com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest.decode(_iprot)
      }
    
      @inline private def writeRequestField(request_item: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(RequestField)
        writeRequestValue(request_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeRequestValue(request_item: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest, _oprot: TProtocol): Unit = {
        request_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest
      ) = this(
        traceId,
        request,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (request ne null) writeRequestField(request, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.request
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.sms.rpc.domain.SmsBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("verifyLoginVerificationCode_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.sms.rpc.domain.SmsBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.sms.rpc.domain.SmsBaseResponse = {
        com.jxjxgo.sms.rpc.domain.SmsBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.sms.rpc.domain.SmsBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.sms.rpc.domain.SmsBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.sms.rpc.domain.SmsBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "verifyLoginVerificationCode"
    val serviceName = "SmsServiceEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val verifyLoginVerificationCode$args = VerifyLoginVerificationCode.Args
  type verifyLoginVerificationCode$args = VerifyLoginVerificationCode.Args

  val verifyLoginVerificationCode$result = VerifyLoginVerificationCode.Result
  type verifyLoginVerificationCode$result = VerifyLoginVerificationCode.Result


  trait FutureIface extends SmsServiceEndpoint[Future] {
    
    def sendLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeRequest): Future[com.jxjxgo.sms.rpc.domain.SendLoginVerificationCodeResponse]
    
    def verifyLoginVerificationCode(traceId: String, request: com.jxjxgo.sms.rpc.domain.VerifyLoginVerificationCodeRequest): Future[com.jxjxgo.sms.rpc.domain.SmsBaseResponse]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "SmsServiceEndpoint",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default)
    extends SmsServiceEndpoint$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats,
      responseClassifier)
    with FutureIface {

    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)
  }

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends SmsServiceEndpoint$FinagleService(
      iface,
      protocolFactory)
}